<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>平均路径长度&amp;直径</title>
      <link href="/2023/07/29/%E5%B9%B3%E5%9D%87%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6&amp;%E7%9B%B4%E5%BE%84/"/>
      <url>/2023/07/29/%E5%B9%B3%E5%9D%87%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6&amp;%E7%9B%B4%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h2 id="平均路径长度-amp-直径"><a href="#平均路径长度-amp-直径" class="headerlink" title="平均路径长度&amp;直径"></a>平均路径长度&amp;直径</h2><ul><li>网络中两个节点$i$和$j$之间的最短路径(测地距离)，是指连接这两个节点的边数最少的路径。</li><li><p>平均路径长度(特征路径长度、平均距离):定义为任一两个节点之间的距离的平均值，即</p><script type="math/tex; mode=display">  L = \frac{1}{\frac{1}{2}N(N-1)}\sum_{i \geq j}d_{ij}</script>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 书P91样例实现</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>][<span class="number">5</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line"><span class="type">int</span> path[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">std::queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line"><span class="type">int</span> step = <span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calCharacteristicPathLength</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> graph[<span class="number">5</span>][<span class="number">5</span>])</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(path, <span class="number">99</span>, <span class="keyword">sizeof</span> path);</span><br><span class="line">    <span class="comment">// 对每个节点遍历找到其对应的最小值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        vis[i] = <span class="literal">true</span>;</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; curLevel;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                curLevel.<span class="built_in">push</span>(q.<span class="built_in">front</span>());</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!curLevel.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                <span class="type">int</span> node = curLevel.<span class="built_in">front</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j == node)&#123;</span><br><span class="line">                        path[j][j] = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(graph[node][j])&#123;</span><br><span class="line">                        path[node][j] = path[j][node] = <span class="number">1</span>;</span><br><span class="line">                        <span class="comment">// 取最小值，后面再次找到时会修改这个地方</span></span><br><span class="line">                        path[i][j] = path[j][i] = std::<span class="built_in">min</span>(step, path[j][i]);</span><br><span class="line">                        <span class="keyword">if</span>(!vis[j]) &#123;</span><br><span class="line">                            vis[j] = <span class="literal">true</span>;</span><br><span class="line">                            q.<span class="built_in">push</span>(j);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                curLevel.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            step ++;</span><br><span class="line">        &#125;</span><br><span class="line">        step = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n; i+= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += <span class="number">1</span>) &#123;</span><br><span class="line">            res += path[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>全局效率(GE):反映了网络中两个节点之间发送信息的平均效率。</p></li></ul><script type="math/tex; mode=display">GE = \frac{1}{\frac{1}{2}{N}(N-1)}\sum_{i > j}\frac{1}{d_{ij}}</script><script type="math/tex; mode=display">L = \frac{1}{GE}</script><ul><li><p>网络直径(D):</p><script type="math/tex; mode=display">D = max_{i,j}d_{ij}</script></li><li><p>f(d): 网络中距离为d的联通的节点对的数量占整个网络中联通的节点对数量的比例。</p></li><li><p>g(d): 网络中距离不超过d的联通的节点对的数量占整个网络中联通的节点对数量的比例。<br>如果存在整数D满足下式，则D为网络的有效直径：</p><script type="math/tex; mode=display">  g(D-1)<0.9, g(D) \geq 0.9</script><p>  推广:(插值法)假设$d \leq r &lt; d + 1$，通过线性插值定义$g(r)$如下：</p><script type="math/tex; mode=display">  g(r) = g(d) + (g(d+1) - g(d))(r-d)</script></li><li><p>求解加权有向网络上两点之间的最短路：迪杰斯特拉算法。存在负权值边的网络的最短路径问题，采用Bellman-Ford算法。<br>TODO：代码</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 研究生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络科学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络基本拓扑性质</title>
      <link href="/2023/07/28/7.28/"/>
      <url>/2023/07/28/7.28/</url>
      
        <content type="html"><![CDATA[<h2 id="网络的拓扑性质"><a href="#网络的拓扑性质" class="headerlink" title="网络的拓扑性质"></a>网络的拓扑性质</h2><ul><li><strong>割点</strong>：如果去除某个顶点就使得一个图从连通变为不连通,那么该顶点就称为割点。</li><li><strong>桥</strong>：如果去除某条边就使得一个图从连通变为不连通,那么这条边就称为桥。</li><li><strong>巨片</strong>： 许多实际的大规模复杂网络都是不连通的，但是往往会存在一个特别大的连通片，它包含了整个网络中相当比例的节点。</li></ul><h3 id="弱联通巨片"><a href="#弱联通巨片" class="headerlink" title="弱联通巨片"></a>弱联通巨片</h3><ul><li>定义：实际的大规模有向网络往往既不是强连通也不是弱连通的,但是许多有向网络往往有一个包含了网络中相当部分节点的很大的弱连通片。这一弱联通巨片往往具有一种包含4个部分的蝴蝶结结构。</li></ul><p><img src="../_posts/July/image.png" alt="Alt text"></p><ul><li><p>(1)<strong>强连通核</strong>(SCC)：强连通巨片，位于网络的中心。SCC中任意两个节点之间都是强连通的，即存在从任一节点到另一节点的有向路径。</p></li><li><p>(2)<strong>入部</strong>：包含那些可以通过有向路径到达SCC但不能从SCC到达的节点，一定存在从IN中任一节点到SCC中任一节点的有向路径，反之，从SCC中任一节点出发沿着有向边都无法到达IN中的一个节点。</p></li><li><p>(3)<strong>出部</strong>：包含那些可以从SCC通过有向路径到达但不能到达SCC的节点。也就是说，一定存在从SCC中任一节点到OUT中任一节点的有向路径;反之,从OUT中任一节点出发沿着有向边都无法到达SCC中的一个节点。从IN中任一节点到OUT中任一节点必然存在有向路径,而且该路径必经过SCC中的某些节点。</p></li><li><p>(4)<strong>卷须</strong>(tendrils)：包含那些既无法到达SCC也无法从SCC到达的节点。对于挂在IN上的任一卷须节点,必至少存在一条从IN中某一节点到该节点的不需经过SCC的有向路径;对于挂在OUT上的任一卷须节点,必至少存在一条从该节点到OUT中某一节点的不需经过SCC的有向路径。此外，还有可能存在从挂在IN上的卷须节点到挂在OUT上的卷须节点的不经过SCC的有向路径，这些串在一起的卷须节点称为<strong>管子</strong>(Tube)。</p></li></ul><h3 id="度与平均度"><a href="#度与平均度" class="headerlink" title="度与平均度"></a>度与平均度</h3><ul><li><p><strong>度</strong>：无向网络中节点$i$的度$k_i$定义为与节点直接相连的边的数目。</p></li><li><p><strong>平均度</strong>：网络中所有节点的度的平均值。其中M代表边数，N为节点数目。</p><script type="math/tex; mode=display">  M = \frac{N<k>}{2} = \frac{1}{2}\sum{a_{ij}}</script><script type="math/tex; mode=display">  <k> = \frac{2M}{N}</script></li><li><strong>入度&amp;出度</strong>：出度：节点指出去的边的数目。入度：节点指进来的边的数目。对于系统中每个个体而言不一定成立的性质，却会在整个系统层面成立。</li><li>强度：节点$i$的强度定义为：<script type="math/tex">s_i = \sum_{j=1}^{N}{w_{ij}}</script></li><li>密度(density):一个包含N个节点的网络的密度$ρ$定义为网络中实际存在的边数与最大可能的边数之比。无向网络中有，有向网络中去掉1/2即可。<script type="math/tex; mode=display">ρ = \frac{M}{\frac{1}{2}N(N-1)} \approx \frac{<k>}{N}</script></li><li>实际边数与$N^2$同阶，则认为网络是稠密的。</li><li>实际网络的演化服从超线性关系，即为稠密化幂律，其边M(t)和节点N(t)的关系介于线性与平方之间。<script type="math/tex; mode=display">M(t) {\sim} N^α(t),  1 < α < 2</script><script type="math/tex; mode=display">lnM(t) \approx \alpha(lnN(t)) + C, 1 < \alpha < 2</script></li></ul><h3 id="聚类系数"><a href="#聚类系数" class="headerlink" title="聚类系数"></a>聚类系数</h3><ul><li>定义:刻画你的任意两个朋友之间也互为朋友的概率。<script type="math/tex; mode=display">C_i = \frac{E_i}{k_i(k_i-1)/2}=\frac{2E_i}{k_i(k_i-1)} = \frac{1}{k_i(k_i - 1)}\sum_{j,k=1}^Na_{ij}a_{jk}a_{ki}</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求集聚系数，书P98的例子</span></span><br><span class="line"><span class="comment"> * @param n 节点数目</span></span><br><span class="line"><span class="comment"> * @param graph</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">cluster_coefficient</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> graph[N][N])</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="type">double</span> res = <span class="number">0.0</span>, ans = <span class="number">0.0</span>;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">v</span>(N);</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;::iterator iter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i+= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j+= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (graph[i][j]) v[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">    <span class="keyword">for</span> (iter = v.<span class="built_in">begin</span>(); iter != v.<span class="built_in">end</span>(); ++iter)&#123;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; row = *iter;</span><br><span class="line">        <span class="keyword">if</span>(row.<span class="built_in">size</span>() &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            res = <span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; row.<span class="built_in">size</span>(); ++j)&#123;</span><br><span class="line">                <span class="type">int</span> x = row[i], y = row[j];</span><br><span class="line">                <span class="keyword">if</span> (graph[x][y])&#123;</span><br><span class="line">                    res += <span class="number">1.0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> len = row.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">double</span> c_i = <span class="number">2.0</span> * res / (len * (len - <span class="number">1</span>));</span><br><span class="line"><span class="comment">//        std::cout &lt;&lt; 2.0 * res / (row.size() * (row.size() - 1)) &lt;&lt; std::endl;</span></span><br><span class="line">        res = <span class="number">0.0</span>;</span><br><span class="line">        ans += c_i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans / n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>网络科学研究中有时会关注一类节点的整体行为或平均行为。在求得各节点聚类系数的基础上，我们可以得到度为k的节点的聚类系数的平均值，从而把聚类系数表示为节点度的函数。</p><script type="math/tex; mode=display">C(k) = \frac{\sum_i{C_i\delta_{k_ik}}}{\sum_i\delta{k_ik}}</script><p>这里$\delta{k_ik}$为如下定义的Kronecker $\delta$函数:</p><script type="math/tex; mode=display">\delta{k_ik}\begin{cases}  1, k_i = k \\  0, k_i \neq k\end{cases}</script></li><li><p>研究表明，许多实际网络$C(k)$具有幂律形式$C(k){\sim}k^{-\alpha}(\alpha &gt; 0)$</p></li></ul><h3 id="度分布"><a href="#度分布" class="headerlink" title="度分布"></a>度分布</h3><ul><li>定义:$p_k$可以视为网络中一个随机选择的节点的度为k的概率。</li><li><p>出度分布：$P(k^{out})$定义为网络中随机选取的一个节点的出度为$k^{out}$的概率。</p></li><li><p>常见的离散型概率分布有超几何分布、二项分布、泊松分布。他们在一定条件下都可以看做是正态分布的离散化形式，并且概率分布图都近似具有钟形形状。<br>  <strong>泊松分布</strong>：其中参数$\lambda$&gt;0,其均值和方差都是$\lambda$。</p><script type="math/tex; mode=display">  P(k) = \frac{\lambda^ke{-\lambda}}{k!}</script><p>  <strong>钟形分布</strong>:两头高、中间低，钟形曲线的峰值是随机变量的均值。<br>  <strong>特征标度</strong>：大部分取值应该落在以特征标度为中心的一个相对较小的区间内。<br>  <strong>均匀网络(匀质网络)</strong>:如果一个实际网络的度分布曲线近似具有钟形形状，其形状在远离峰值<k>处呈指数下降，这意味着我们几乎可以肯定地认为网络中所有节点的度都与网络的平均度<k>相差不大，即网络中不存在一个具有比平均都大的太多的度值的节点。<br>  <strong>长尾分布(无标度分布)</strong>:幂律分布是唯一一种具有无标度特性的长尾分布，幂律分布的分布函数才具有长尾的形状，长尾分布具有一个长长的尾巴，意味着大部分个体的取值都很小，但是会有小部分个体的取值非常大。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 研究生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络科学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
